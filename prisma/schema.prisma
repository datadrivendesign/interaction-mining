generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type AppsCategory {
  id   String
  name String
}

type ScreenGesture {
  // Multiple data types found: Float: 11.4%, Int: 88.6% out of 1000 sampled entries
  scrollDeltaX Float
  // Multiple Float types found: Float: 37.9%, Int: 62.1% out of 1000 sampled entries
  scrollDeltaY Float
  // Multiple data types found: Float: 99.8%, Int: 0.2% out of 1000 sampled entries
  x            Float
  // Multiple data types found: Float: 99.9%, Int: 0.1% out of 1000 sampled entries
  y            Float
}

enum Role {
  USER
  ADMIN
}


type AppMetadata {
  company     String
  packageName String
  name        String
  cover       String
  description String
  icon        String
  rating      String
  reviews     String?
  genre       String[]
} 

model App {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  v           Int?         @map("__v")
  category    AppsCategory
  traces      Trace[]
  captured    DateTime     @db.Date
  metadata    AppMetadata
  downloads   String


  @@fulltext([metadata.name])
  @@map("apps")
}

model Redaction {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  v      Int    @map("__v")
  label  String
  screen String @db.ObjectId

  @@map("redactions")
}

model Screen {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  v       Int            @map("__v")
  created DateTime       @db.Date
  gesture ScreenGesture
  src     String
  vh      String
  traceId String         @map("trace") @db.ObjectId
  trace   Trace          @relation(fields: [traceId], references: [id])

  @@map("screens")
}

model Trace {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  appId       String   @map("app") @db.ObjectId
  app         App      @relation(fields: [appId], references: [id])
  created     DateTime @db.Date
  name        String?
  description String
  screensIds  String[] @map("screens") @db.ObjectId
  screens     Screen[]
  worker      String

  @@map("traces")
}

model User{
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  name        String?
  role        Role         @default(USER) 
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  appId       String   @map("app") @db.ObjectId
  description String
  os          String
  traces      String[] @db.ObjectId

  @@map("tasks")
}

model Recording {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  appId   String   @map("app") @db.ObjectId
  userId  String   @map("user") @db.ObjectId
  otp     Int
  src     String

  @@map("recordings")
}
